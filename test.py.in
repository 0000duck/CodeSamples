#!@PYTHON_EXECUTABLE@

import os, sys
sys.path.insert(0, os.path.join('@CMAKE_SOURCE_DIR@', 'PythonModules'))
from Gdb import Gdb
import argparse
from Locator import Locator
from Launcher import Launcher
from Environment import Environment
from Emacs import Emacs
import yaml

class Make:
    def __init__(self, file_name):
        self.file_name = file_name
        self.make = Launcher('make')
        self.make += '-f'
        self.make += os.path.join("@CMAKE_CURRENT_BINARY_DIR@", 'Makefile')

    def __call__(self, suffix = None):
        target = self.file_name
        if suffix:
            target += '.' + suffix
        self.make += target
        self.make(wait_for_command_to_complete = True)
    
class RunOnExe:
    def __init__(self, exe_name):
        self.exe_name = exe_name

    def __call__(self, cmd):
        l = Launcher(cmd)
        l.addArg(self.exe_name)
        l(wait_for_command_to_complete = True)

class Action(object):
    def __init__(self):
        self.yml = yaml.load(file('@CMAKE_VARIABLES_YML_OUT_FILE@', 'r'))
        self.yml.update(yaml.load(file('@CMAKE_BINARY_DIR@/CodeSamples.yml', 'r')))
        build_type = self.yml['cmake']['build_type'].lower()
        exe_dir = self.yml[build_type]['inst_prefix']
        
        ld_lib_path = Environment('LD_LIBRARY_PATH')
        ld_lib_path.prepend(self.yml[build_type]['output_dir']['library'])
        ld_lib_path.prepend(self.yml['dir']['boost_lib'])
        ld_lib_path.prepend_dir_of(self.yml['lib'][build_type]['yaml'])
        ld_lib_path.prepend_dir_of(self.yml['lib'][build_type]['curl'])
        
        self.exe_file = os.path.join(exe_dir, self.yml['misc']['git_branch'], 'bin', '@exeName@')

class EditAction(Action):
    def __init__(self, option):
        super(EditAction, self).__init__()
        bin_dir = os.path.join('@CMAKE_CURRENT_BINARY_DIR@', 'CMakeFiles', '@exeName@.dir')
        base_name = os.path.basename('@file@')
        self.file_map = {
            's' : '@file@',
            'c' : '@CMAKE_CURRENT_LIST_FILE@',
            'i' : os.path.join(bin_dir, base_name + '.i'),
            'a' : os.path.join(bin_dir, base_name + '.s'),
            'w' : os.path.abspath(__file__),
            't' : '@PYTHON_IN_FILE@',
            'm' : self.yml['cmake']['parent_list_file']
            }
        self.file = self.file_map[option]

    def __call__(self):
        emacs = Emacs (
            self.yml['misc']['emacs_server'],
            files = [self.file]
            )
        emacs.launch()
    
class RunAction(Action):
    def __init__(self, option):
        super(RunAction, self).__init__()
        self.option = option
        self.run_on_exe = {
            'l' : 'ldd',
            's' : 'nm'
            }
        
        self.debug = (option == 'd')
        self.dry_run = (option == 'y')

    def _runExe(self):
        cmake = self.yml['cmake']
        init_file = os.path.join(cmake['binary-dir'], 'init.gdb')
        l = Gdb(exe_file = self.exe_file, debug = self.debug, init_file = init_file, dry_run = self.dry_run)
        l(
            srcdir = cmake['source-dir'],
            bindir = cmake['binary-dir'],
            cur_srcdir = '@CMAKE_CURRENT_SOURCE_DIR@',
            cur_bindir = '@CMAKE_CURRENT_BINARY_DIR@'
            )

    def _runOnExe(self):
        r = RunOnExe(self.exe_file)
        r(self.run_on_exe[self.option])
        
    def __call__(self):
        if self.run_on_exe.has_key(self.option):
            self._runOnExe()
        else:
            self._runExe()
        
class CompileAction(Action):
    def __init__(self, option):
        self.make = Make(os.path.basename('@file@'))
        if option == 'e':
            self.make = Make('@exeName@')
            self.suffix = None
        else:
            self.suffix = option
        
    def __call__(self):
        self.make(self.suffix)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog = '@exeName@')
    subparsers = parser.add_subparsers()

    compile_parser = subparsers.add_parser('c')
    run_parser = subparsers.add_parser('r')
    edit_parser = subparsers.add_parser('e')

    compile_parser.add_argument('-t', dest='compile_type', choices='eiso')
    run_parser.add_argument('-t', dest='run_type', choices='drlys')
    edit_parser.add_argument('-t', dest='edit_type', choices='siacwtm')

    actions = {
        'edit_type' : lambda(option): EditAction(option),
        'run_type' : lambda(option): RunAction(option),
        'compile_type' : lambda(option): CompileAction(option)
        }
    
    args = parser.parse_args()
    command_type = vars(args).keys()[0]

    action = actions[command_type](getattr(args, command_type))
    action()
