#!@PYTHON_EXECUTABLE@

import os, sys
sys.path.insert(0, os.path.join('@CMAKE_SOURCE_DIR@', 'PythonModules'))
from Gdb import Gdb
import argparse
from Locator import Locator
from Launcher import Launcher
from Environment import Environment
import yaml

yml = None

class TestApp:
    def __init__(self, **kwargs):
        build_type = yml['cmake']['build_type'].lower()
        exe_dir = yml[build_type]['inst_prefix']
        
        ld_lib_path = Environment('LD_LIBRARY_PATH')
        ld_lib_path.prepend(yml[build_type]['output_dir']['library'])
        ld_lib_path.prepend(yml['dir']['boost_lib'])
        
        self.exe_file = os.path.join(exe_dir, yml['misc']['git_branch'], 'bin', kwargs['name'])

    def __call__(self, **kwargs):
        if kwargs['show_deps']:
            l = Launcher(Locator('ldd')())
            l.addArg(self.exe_file)
            l(wait_for_command_to_complete = True)
        else:
            cmake = yml['cmake']
            init_file = os.path.join(cmake['binary_dir'], 'init.gdb')
            l = Gdb(exe_file = self.exe_file, debug = kwargs['debug'], init_file = init_file, dry_run = kwargs['dry_run'])
            l(
                srcdir = cmake['source_dir'],
                bindir = cmake['binary_dir'],
                cur_srcdir = '@CMAKE_CURRENT_SOURCE_DIR@',
                cur_bindir = '@CMAKE_CURRENT_BINARY_DIR@'
                )


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog = '@exeName@')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-d', dest = 'debug', action = 'store_true')
    group.add_argument('-l', dest = 'show_deps', action = 'store_true')
    group.add_argument('-dr', dest = 'dry_run', action = 'store_true')
    s = file('@CMAKE_VARIABLES_YML_OUT_FILE@', 'r')
    yml = yaml.load(s)

    args = parser.parse_args()
    args.run_app = True
    if args.debug or args.show_deps:
        args.run_app = False
        
    t = TestApp(
        name = '@exeName@',
        )
    
    t(debug = args.debug, show_deps = args.show_deps, dry_run = args.dry_run)

