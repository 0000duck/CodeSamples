#!@PYTHON_EXECUTABLE@

import os, sys
sys.path.insert(0, os.path.join('@CMAKE_SOURCE_DIR@', 'PythonModules'))
from Gdb import Gdb
import argparse
from Locator import Locator
from Launcher import Launcher
from Environment import Environment
import yaml

yml = None

class Make:
    def __init__(self, file_name):
        self.file_name = file_name
        self.make = Launcher('make')
        self.make += '-f'
        self.make += os.path.join("@CMAKE_CURRENT_BINARY_DIR@", 'Makefile')

    def __call__(self, suffix = None):
        target = self.file_name
        if suffix:
            target += '.' + suffix
        self.make += target
        self.make(wait_for_command_to_complete = True)
    
class RunOnExe:
    def __init__(self, exe_name):
        self.exe_name = exe_name

    def __call__(self, cmd):
        l = Launcher(cmd)
        l.addArg(self.exe_name)
        l(wait_for_command_to_complete = True)

class TestApp:
    def __init__(self, **kwargs):
        build_type = yml['cmake']['build_type'].lower()
        exe_dir = yml[build_type]['inst_prefix']
        
        ld_lib_path = Environment('LD_LIBRARY_PATH')
        ld_lib_path.prepend(yml[build_type]['output_dir']['library'])
        ld_lib_path.prepend(yml['dir']['boost_lib'])
        
        self.exe_file = os.path.join(exe_dir, yml['misc']['git_branch'], 'bin', kwargs['name'])

    def __call__(self, **kwargs):
        r = RunOnExe(self.exe_file)
        m = Make(os.path.basename("@file@"))
        if kwargs['show_deps']:
            r('ldd')
        elif kwargs['show_symbols']:
            r('nm')
        elif kwargs['create_assembly_file']:
            m('s')
        elif kwargs['create_preprocessed_file']:
            m('i')
        elif kwargs['create_object_file']:
            m('o')
        else:
            cmake = yml['cmake']
            init_file = os.path.join(cmake['binary-dir'], 'init.gdb')
            l = Gdb(exe_file = self.exe_file, debug = kwargs['debug'], init_file = init_file, dry_run = kwargs['dry_run'])
            l(
                srcdir = cmake['source-dir'],
                bindir = cmake['binary-dir'],
                cur_srcdir = '@CMAKE_CURRENT_SOURCE_DIR@',
                cur_bindir = '@CMAKE_CURRENT_BINARY_DIR@'
                )


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog = '@exeName@')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-d', dest = 'debug', action = 'store_true')
    group.add_argument('-l', dest = 'show_deps', action = 'store_true')
    group.add_argument('-dr', dest = 'dry_run', action = 'store_true')
    group.add_argument('-nm', dest = 'show_symbols', action = 'store_true')
    group.add_argument('-cs', dest = 'create_assembly_file', action = 'store_true')
    group.add_argument('-ci', dest = 'create_preprocessed_file', action = 'store_true')
    group.add_argument('-co', dest = 'create_object_file', action = 'store_true')
    group.add_argument('-bd', dest = 'build_and_debug', action = 'store_true')
    group.add_argument('-br', dest = 'build_and_run', action = 'store_true')
    s = file('@CMAKE_VARIABLES_YML_OUT_FILE@', 'r')
    yml = yaml.load(s)

    args = parser.parse_args()
    args.run_app = True
    if args.debug or args.show_deps:
        args.run_app = False

    build = False
    if args.build_and_debug or args.build_and_run:
        build = True

    if args.build_and_debug:
        args.debug = True

    if args.build_and_run:
        args.debug = False
        
    t = TestApp(
        name = '@exeName@',
        )

    if build:
        m = Make('@exeName@')
        m()
        
    t(
        debug = args.debug,
        show_deps = args.show_deps,
        dry_run = args.dry_run,
        create_assembly_file = args.create_assembly_file,
        create_object_file = args.create_object_file,
        create_preprocessed_file = args.create_preprocessed_file,
        show_symbols = args.show_symbols
        )
    

